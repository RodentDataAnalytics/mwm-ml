function results_strategies_distribution
    addpath(fullfile(fileparts(mfilename('fullpath')), '../extern/export_fig'));
    addpath(fullfile(fileparts(mfilename('fullpath')), '../'));
    addpath(fullfile(fileparts(mfilename('fullpath')), '../extern/AnDarksamtest'));

    % global data initialized elsewhere
    global g_trajectories_trial;    
    global g_trajectories_group;        
    global g_trajectories_speed;        
    global g_segments_classification;
    global g_long_trajectories_idx;
    global g_partitions;
    global g_animals_trajectories_map;
        
    % classify trajectories
    cache_trajectories_classification; 
    
    distr = g_segments_classification.classes_distribution(g_partitions(g_long_trajectories_idx), 'Normalize', 1); 
        
    % look for the really stressed animals
    map = g_animals_trajectories_map{2};
    speed = mean(g_trajectories_speed(map(:, :)));                 
    stressed_idx = map(:, speed > 0);   
    stressed_idx = stressed_idx(:);
    
    % plot cumulative distributions for each trial
    data = [];        
    for c = 1:1 % g_segments_classification.nclasses
        figure;        
        for s = 2:constants.SESSIONS
            ti = (s - 1)*constants.TRIALS_PER_SESSION + 1;
            tf = s*constants.TRIALS_PER_SESSION;
                        
            for g = 1:2                
                data = distr(g_trajectories_trial(g_long_trajectories_idx) >= ti & g_trajectories_trial(g_long_trajectories_idx) <= tf & g_trajectories_group(g_long_trajectories_idx) == g, 1:3);
                data = sum(data, 2);
                if g == 1
                    data1 = data;
                else
                    data2 = data;
                end
%                 if t == 0
%                     data = distr(g_trajectories_trial(g_long_trajectories_idx) == ti & g_trajectories_group(g_long_trajectories_idx) == g, c);
%                 else
%                      data = distr(g_trajectories_trial(g_long_trajectories_idx) == tf & g_trajectories_group(g_long_trajectories_idx) == g, c);
%                end
%                 if g == 1                   
%  %                   data = distr(g_trajectories_trial(g_long_trajectories_idx) >= ti & g_trajectories_group(g_long_trajectories_idx) == 1 & g_trajectories_trial(g_long_trajectories_idx) <= tf & g_trajectories_speed(g_long_trajectories_idx) < 100, c);
%   %                  data1 = data;
%                     speed = mean(g_trajectories_speed(map(ti:tf, :)));                 
%     
%                     stressed_idx = map(:, speed < 100);   
%                     stressed_idx = stressed_idx(:);
%     
%                     data = distr(intersect(...
%                                     stressed_idx, ...
%                                     find(g_trajectories_trial(g_long_trajectories_idx) >= ti & g_trajectories_group(g_long_trajectories_idx) == 1 & g_trajectories_trial(g_long_trajectories_idx) <= tf)), ...
%                                  1:2);
%                     data = sum(data, 2);
%                      data1 = data;
%                 
%                 else
%                     speed = mean(g_trajectories_speed(map(ti:tf, :)));                 
%     
%                     stressed_idx = map(:, speed > 0);   
%                     stressed_idx = stressed_idx(:);
%     
%                     data = distr(intersect(...
%                                     stressed_idx, ...
%                                     find(g_trajectories_trial(g_long_trajectories_idx) >= ti & g_trajectories_group(g_long_trajectories_idx) == 2 & g_trajectories_trial(g_long_trajectories_idx) <= tf)), ...
%                                  1:2);
%                     data = sum(data, 2);
%                    
%                     data2 = data;
%                 end  

                data = sort(data);
                n = length(data);
                p = zeros(1, n);
                p(1) = 1/n;
                for i = 2:n
                    p(i) = p(i - 1) + 1/n;
                end
                if g == 1
                    plot(smooth(data), p, 'k-');
                else
                    plot(smooth(data), p, 'k:');
                end
                hold on;
            end            
            
%             hip = kstest2(data1, data2);
            test_data = zeros(length(data1) + length(data2), 2);
            test_data(1:length(data1), 1) = data1;
            test_data(1:length(data1), 2) = 1;
            test_data(length(data1) + 1:length(test_data), 1) = data2;
            test_data(length(data1) + 1:length(test_data), 2) = 2;
%            AnDarksamtest(test_data);
%              if hip
%                 disp('aha');
%             end
        end
        hold off;
        xlabel(sprintf('%% %s', g_segments_classification.classes(c).description), 'FontSize', constants.FONT_SIZE);
        ylabel('percentage', 'FontSize', constants.FONT_SIZE);
        

    end         
    
    % export_fig(fullfile(constants.OUTPUT_DIR, 'distribution_strat_trials.eps'));
    
    %% do the same for each trial now
    % look for the really stressed animals
    map = g_animals_trajectories_map{2};
    speed = mean(g_trajectories_speed(map(:, :)));                 
    stressed_idx = map(:, speed > 0);   
    stressed_idx = stressed_idx(:);
    
    % plot cumulative distributions for each trial
    data = [];        
    for c = 1:1 % g_segments_classification.nclasses
        figure;        
        for t = 5:constants.TRIALS                        
            for g = 1:2
                  data = distr(g_trajectories_trial(g_long_trajectories_idx) == t & g_trajectories_group(g_long_trajectories_idx) == g, 1:2);

%                 if g == 1
%                     data = distr(g_trajectories_speed(g_long_trajectories_idx) < 28 & g_trajectories_trial(g_long_trajectories_idx) == t & g_trajectories_group(g_long_trajectories_idx) == g, 1:2);
%                 else
%                     data = distr(g_trajectories_speed(g_long_trajectories_idx) > 30 & g_trajectories_trial(g_long_trajectories_idx) == t & g_trajectories_group(g_long_trajectories_idx) == g, 1:2);
%                 end
                 data = sum(data, 2);
                if g == 1
                    data1 = data;
                else
                    data2 = data;
                end
%              
                %data = distr(g_trajectories_trial(g_long_trajectories_idx) >= ti & g_trajectories_trial(g_long_trajectories_idx) <= tf & g_trajectories_group(g_long_trajectories_idx) == g, c);
                %if t == 0
                 %   data = distr(g_trajectories_trial(g_long_trajectories_idx) == ti & g_trajectories_group(g_long_trajectories_idx) == g, c);
                %else
                 %    data = distr(g_trajectories_trial(g_long_trajectories_idx) == tf & g_trajectories_group(g_long_trajectories_idx) == g, c);
               % end
%                 if g == 1                   
%  %                   data = distr(g_trajectories_trial(g_long_trajectories_idx) >= ti & g_trajectories_group(g_long_trajectories_idx) == 1 & g_trajectories_trial(g_long_trajectories_idx) <= tf & g_trajectories_speed(g_long_trajectories_idx) < 100, c);
%   %                  data1 = data;
%                     speed = g_trajectories_speed(map(t, :));                 
%     
%                     stressed_idx = map(:, speed < 100);   
%                     stressed_idx = stressed_idx(:);
%     
%                     data = distr(intersect(...
%                                     stressed_idx, ...
%                                     find(g_trajectories_trial(g_long_trajectories_idx) == t & g_trajectories_group(g_long_trajectories_idx) == 1)), ...
%                                  1:2);
%                     data = sum(data, 2);
%                     data1 = data;
%                 
%                 else
%                     speed = g_trajectories_speed(map(t, :));                 
%     
%                     stressed_idx = map(:, speed > 0);   
%                     stressed_idx = stressed_idx(:);
%     
%                     data = distr(intersect(...
%                                     stressed_idx, ...
%                                     find(g_trajectories_trial(g_long_trajectories_idx) == t & g_trajectories_group(g_long_trajectories_idx) == 2)), ...
%                                  1:2);
%                     data = sum(data, 2);
%                     
%                              data2 = data;
%                 end  

                data = sort(data);
                n = length(data);
                p = zeros(1, n);
                p(1) = 1/n;
                for i = 2:n
                    p(i) = p(i - 1) + 1/n;
                end
                if g == 1
                    plot(smooth(data), p, 'k-');
                else
                    plot(smooth(data), p, 'k:');
                end
                hold on;
            end            

                       test_data = zeros(length(data1) + length(data2), 2);
            test_data(1:length(data1), 1) = data1;
            test_data(1:length(data1), 2) = 1;
            test_data(length(data1) + 1:length(test_data), 1) = data2;
            test_data(length(data1) + 1:length(test_data), 2) = 2;
            AnDarksamtest(test_data);

%            hip = kstest2(data1, data2);
%             if hip
%                 disp('aha');
%             end
        end
        hold off;
        xlabel(sprintf('%% %s', g_segments_classification.classes(c).description), 'FontSize', constants.FONT_SIZE);
        ylabel('percentage', 'FontSize', constants.FONT_SIZE);        
    end
    
end